"use strict";
var project = angular.module('project', [
    'ngStorage',
    'ngAnimate',
    'ui.bootstrap',
    'chieffancypants.loadingBar',
    'ui.router',
    'oc.lazyLoad',
    'datatables',
    'ladda',
    '720kb.tooltips',
    'hl.sticky',
]);

//# sourceMappingURL=appmodule.js.map

"use strict";
project.config(function (cfpLoadingBarProvider, $stateProvider, $urlRouterProvider, $locationProvider) {
    cfpLoadingBarProvider.includeSpinner = true;
    $stateProvider
        .state('home', {
        url: '/home',
        templateUrl: 'includes/home.html',
        title: 'Home',
        resolve: load([
            'js/controllers/index.controller.js',
        ])
    })
        .state('login', {
        url: '/login',
        templateUrl: 'includes/login.html',
        resolve: load([
            'js/controllers/login.controller.js'
        ])
    });
    $urlRouterProvider.otherwise('/login');
    function load(srcs) {
        return {
            deps: function ($ocLazyLoad, $q) {
                var exists = false;
                for (var i = 0; i <= srcs.length; i++) {
                    if (srcs[i] == 'js/libs/user.class.js') {
                        exists = true;
                    }
                }
                if (!exists) {
                    srcs.push('js/libs/user.class.js');
                    srcs.push('js/libs/client.class.js');
                }
                var deferred = $q.defer();
                var promise = deferred.promise;
                promise = promise.then(function () {
                    return $ocLazyLoad.load('js/mainClasses.js');
                });
                angular.forEach(srcs, function (src) {
                    promise = promise.then(function () {
                        return $ocLazyLoad.load(src);
                    });
                });
                deferred.resolve();
                return promise;
            }
        };
    }
});

//# sourceMappingURL=config.js.map

"use strict";
project.controller('main', function () {
    var _this = this;
    this.showModal = function (id) {
        $(id).modal('show');
    };
    this.go = function (state) {
        angularServices.window.href = "#" + state;
    };
    this.console = function (any) {
        console.log(any);
    };
    this.functions = new Object();
    this.functions.dias = new Days();
    this.functions.formatDate12 = formatDate12;
    this.functions.formatTime12 = formatTime12;
    this.functions.clearCache = function () {
        angularServices.ss.$reset();
    };
    this.rs = angularServices.rs;
    this.init = function () {
        $('html, body').animate({
            scrollTop: 0
        }, 500);
        closeModal('#menuModal');
        $('.tooltip').remove();
        var myHash = window.location.hash.replace('#', '').split('?');
        if (myHash[0] == '/login') {
            _this.rs.showComponent = false;
        }
        else {
            _this.rs.showComponent = true;
        }
        pathData = myHash[1];
        switch (myHash[0]) {
            case '/home':
                _this.app = new IndexController(angularServices);
                break;
            case '/login':
                _this.app = new LoginController(angularServices);
                break;
            case '/test':
                break;
            default:
        }
        ;
    };
});

//# sourceMappingURL=controller.js.map

"use strict";
project.run(function ($rootScope, $sessionStorage, $http, $ocLazyLoad, $sce, $q, $location, $window, $localStorage) {
    $rootScope.showComponent = false;
    angularServices = {
        rs: $rootScope,
        ss: $sessionStorage,
        http: $http,
        lazy: $ocLazyLoad,
        sce: $sce,
        q: $q,
        location: $location,
        window: $window,
        localStorage: $localStorage,
        cookie: 0
    };
    loc = function () {
        if ($http.defaults.headers != undefined)
            $http.defaults.headers.common['W-Token'] = $sessionStorage.tk;
    };
    loc();
    load = function (src) {
        return $ocLazyLoad.load(src);
    };
    dataUrl = function (file) {
        var $d = $q.defer();
        var $p = $d.promise;
        if (file.files && file.files[0]) {
            var f = file.files[0];
            var dSize = void 0;
            if ($(file).attr('data-size')) {
                dSize = $(file).attr('data-size');
            }
            else {
                dSize = 1000;
            }
            dSize = dSize.toString();
            var size = parseInt(dSize);
            var sizeKB = size / 1000;
            if (f.size < size) {
                var reader = new FileReader();
                var targetId_1 = new String($(file).attr('data-target'));
                reader.readAsDataURL(file.files[0]);
                reader.onload = function (e) {
                    $("#" + targetId_1).css('background-image', "url(" + e.target.result + ")");
                    var myImg = {
                        b64: e.target.result,
                        name: file.files[0].name
                    };
                    $d.resolve(myImg);
                };
            }
            else {
                swAlert('Oops', "El tamano del archivo no puede ser mayor a " + sizeKB + "kb", 'error');
            }
            return $p;
        }
    };
});
var serviceRoot = '';

//# sourceMappingURL=run.js.map

//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";
var project = angular.module('project', [
    'ngStorage',
    'ngAnimate',
    'ui.bootstrap',
    'chieffancypants.loadingBar',
    'ui.router',
    'oc.lazyLoad',
    'datatables',
    'ladda',
    '720kb.tooltips',
    'hl.sticky',
]);

//# sourceMappingURL=appmodule.js.map

"use strict";
project.config(function (cfpLoadingBarProvider, $stateProvider, $urlRouterProvider, $locationProvider) {
    cfpLoadingBarProvider.includeSpinner = true;
    $stateProvider
        .state('home', {
        url: '/home',
        templateUrl: 'includes/home.html',
        title: 'Home',
        resolve: load([
            'js/controllers/index.controller.js',
        ])
    })
        .state('login', {
        url: '/login',
        templateUrl: 'includes/login.html',
        resolve: load([
            'js/controllers/login.controller.js'
        ])
    });
    $urlRouterProvider.otherwise('/login');
    function load(srcs) {
        return {
            deps: function ($ocLazyLoad, $q) {
                var exists = false;
                for (var i = 0; i <= srcs.length; i++) {
                    if (srcs[i] == 'js/libs/user.class.js') {
                        exists = true;
                    }
                }
                if (!exists) {
                    srcs.push('js/libs/user.class.js');
                    srcs.push('js/libs/client.class.js');
                }
                var deferred = $q.defer();
                var promise = deferred.promise;
                promise = promise.then(function () {
                    return $ocLazyLoad.load('js/mainClasses.js');
                });
                angular.forEach(srcs, function (src) {
                    promise = promise.then(function () {
                        return $ocLazyLoad.load(src);
                    });
                });
                deferred.resolve();
                return promise;
            }
        };
    }
});

//# sourceMappingURL=config.js.map

"use strict";
project.controller('main', function () {
    var _this = this;
    this.showModal = function (id) {
        $(id).modal('show');
    };
    this.go = function (state) {
        angularServices.window.href = "#" + state;
    };
    this.console = function (any) {
        console.log(any);
    };
    this.functions = new Object();
    this.functions.dias = new Days();
    this.functions.formatDate12 = formatDate12;
    this.functions.formatTime12 = formatTime12;
    this.functions.clearCache = function () {
        angularServices.ss.$reset();
    };
    this.rs = angularServices.rs;
    this.init = function () {
        $('html, body').animate({
            scrollTop: 0
        }, 500);
        closeModal('#menuModal');
        $('.tooltip').remove();
        var myHash = window.location.hash.replace('#', '').split('?');
        if (myHash[0] == '/login') {
            _this.rs.showComponent = false;
        }
        else {
            _this.rs.showComponent = true;
        }
        pathData = myHash[1];
        switch (myHash[0]) {
            case '/home':
                _this.app = new IndexController(angularServices);
                break;
            case '/login':
                _this.app = new LoginController(angularServices);
                break;
            case '/test':
                break;
            default:
        }
        ;
    };
});

//# sourceMappingURL=controller.js.map

"use strict";
project.run(function ($rootScope, $sessionStorage, $http, $ocLazyLoad, $sce, $q, $location, $window, $localStorage) {
    $rootScope.showComponent = false;
    angularServices = {
        rs: $rootScope,
        ss: $sessionStorage,
        http: $http,
        lazy: $ocLazyLoad,
        sce: $sce,
        q: $q,
        location: $location,
        window: $window,
        localStorage: $localStorage,
        cookie: 0
    };
    loc = function () {
        if ($http.defaults.headers != undefined)
            $http.defaults.headers.common['W-Token'] = $sessionStorage.tk;
    };
    loc();
    load = function (src) {
        return $ocLazyLoad.load(src);
    };
    dataUrl = function (file) {
        var $d = $q.defer();
        var $p = $d.promise;
        if (file.files && file.files[0]) {
            var f = file.files[0];
            var dSize = void 0;
            if ($(file).attr('data-size')) {
                dSize = $(file).attr('data-size');
            }
            else {
                dSize = 1000;
            }
            dSize = dSize.toString();
            var size = parseInt(dSize);
            var sizeKB = size / 1000;
            if (f.size < size) {
                var reader = new FileReader();
                var targetId_1 = new String($(file).attr('data-target'));
                reader.readAsDataURL(file.files[0]);
                reader.onload = function (e) {
                    $("#" + targetId_1).css('background-image', "url(" + e.target.result + ")");
                    var myImg = {
                        b64: e.target.result,
                        name: file.files[0].name
                    };
                    $d.resolve(myImg);
                };
            }
            else {
                swAlert('Oops', "El tamano del archivo no puede ser mayor a " + sizeKB + "kb", 'error');
            }
            return $p;
        }
    };
});
var serviceRoot = '';

//# sourceMappingURL=run.js.map

//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";
var project = angular.module('project', [
    'ngStorage',
    'ngAnimate',
    'ui.bootstrap',
    'chieffancypants.loadingBar',
    'ui.router',
    'oc.lazyLoad',
    'datatables',
    'ladda',
    '720kb.tooltips',
    'hl.sticky',
]);

//# sourceMappingURL=appmodule.js.map

"use strict";
project.config(function (cfpLoadingBarProvider, $stateProvider, $urlRouterProvider, $locationProvider) {
    cfpLoadingBarProvider.includeSpinner = true;
    $stateProvider
        .state('home', {
        url: '/home',
        templateUrl: 'includes/home.html',
        title: 'Home',
        resolve: load([
            'js/controllers/index.controller.js',
        ])
    })
        .state('login', {
        url: '/login',
        templateUrl: 'includes/login.html',
        resolve: load([
            'js/controllers/login.controller.js'
        ])
    });
    $urlRouterProvider.otherwise('/login');
    function load(srcs) {
        return {
            deps: function ($ocLazyLoad, $q) {
                var exists = false;
                for (var i = 0; i <= srcs.length; i++) {
                    if (srcs[i] == 'js/libs/user.class.js') {
                        exists = true;
                    }
                }
                if (!exists) {
                    srcs.push('js/libs/user.class.js');
                    srcs.push('js/libs/client.class.js');
                }
                var deferred = $q.defer();
                var promise = deferred.promise;
                promise = promise.then(function () {
                    return $ocLazyLoad.load('js/mainClasses.js');
                });
                angular.forEach(srcs, function (src) {
                    promise = promise.then(function () {
                        return $ocLazyLoad.load(src);
                    });
                });
                deferred.resolve();
                return promise;
            }
        };
    }
});

//# sourceMappingURL=config.js.map

"use strict";
project.controller('main', function () {
    var _this = this;
    this.showModal = function (id) {
        $(id).modal('show');
    };
    this.go = function (state) {
        angularServices.window.href = "#" + state;
    };
    this.console = function (any) {
        console.log(any);
    };
    this.functions = new Object();
    this.functions.dias = new Days();
    this.functions.formatDate12 = formatDate12;
    this.functions.formatTime12 = formatTime12;
    this.functions.clearCache = function () {
        angularServices.ss.$reset();
    };
    this.rs = angularServices.rs;
    this.init = function () {
        $('html, body').animate({
            scrollTop: 0
        }, 500);
        closeModal('#menuModal');
        $('.tooltip').remove();
        var myHash = window.location.hash.replace('#', '').split('?');
        if (myHash[0] == '/login') {
            _this.rs.showComponent = false;
        }
        else {
            _this.rs.showComponent = true;
        }
        pathData = myHash[1];
        switch (myHash[0]) {
            case '/home':
                _this.app = new IndexController(angularServices);
                break;
            case '/login':
                _this.app = new LoginController(angularServices);
                break;
            case '/test':
                break;
            default:
        }
        ;
    };
});

//# sourceMappingURL=controller.js.map

"use strict";
project.run(function ($rootScope, $sessionStorage, $http, $ocLazyLoad, $sce, $q, $location, $window, $localStorage) {
    $rootScope.showComponent = false;
    angularServices = {
        rs: $rootScope,
        ss: $sessionStorage,
        http: $http,
        lazy: $ocLazyLoad,
        sce: $sce,
        q: $q,
        location: $location,
        window: $window,
        localStorage: $localStorage,
        cookie: 0
    };
    loc = function () {
        if ($http.defaults.headers != undefined)
            $http.defaults.headers.common['W-Token'] = $sessionStorage.tk;
    };
    loc();
    load = function (src) {
        return $ocLazyLoad.load(src);
    };
    dataUrl = function (file) {
        var $d = $q.defer();
        var $p = $d.promise;
        if (file.files && file.files[0]) {
            var f = file.files[0];
            var dSize = void 0;
            if ($(file).attr('data-size')) {
                dSize = $(file).attr('data-size');
            }
            else {
                dSize = 1000;
            }
            dSize = dSize.toString();
            var size = parseInt(dSize);
            var sizeKB = size / 1000;
            if (f.size < size) {
                var reader = new FileReader();
                var targetId_1 = new String($(file).attr('data-target'));
                reader.readAsDataURL(file.files[0]);
                reader.onload = function (e) {
                    $("#" + targetId_1).css('background-image', "url(" + e.target.result + ")");
                    var myImg = {
                        b64: e.target.result,
                        name: file.files[0].name
                    };
                    $d.resolve(myImg);
                };
            }
            else {
                swAlert('Oops', "El tamano del archivo no puede ser mayor a " + sizeKB + "kb", 'error');
            }
            return $p;
        }
    };
});
var serviceRoot = '';

//# sourceMappingURL=run.js.map

//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";
var project = angular.module('project', [
    'ngStorage',
    'ngAnimate',
    'ui.bootstrap',
    'chieffancypants.loadingBar',
    'ui.router',
    'oc.lazyLoad',
    'datatables',
    'ladda',
    '720kb.tooltips',
    'hl.sticky',
]);

//# sourceMappingURL=appmodule.js.map

"use strict";
project.config(function (cfpLoadingBarProvider, $stateProvider, $urlRouterProvider, $locationProvider) {
    cfpLoadingBarProvider.includeSpinner = true;
    $stateProvider
        .state('home', {
        url: '/home',
        templateUrl: 'includes/home.html',
        title: 'Home',
        resolve: load([
            'js/controllers/index.controller.js',
        ])
    })
        .state('login', {
        url: '/login',
        templateUrl: 'includes/login.html',
        resolve: load([
            'js/controllers/login.controller.js'
        ])
    });
    $urlRouterProvider.otherwise('/login');
    function load(srcs) {
        return {
            deps: function ($ocLazyLoad, $q) {
                var exists = false;
                for (var i = 0; i <= srcs.length; i++) {
                    if (srcs[i] == 'js/libs/user.class.js') {
                        exists = true;
                    }
                }
                if (!exists) {
                    srcs.push('js/libs/user.class.js');
                    srcs.push('js/libs/client.class.js');
                }
                var deferred = $q.defer();
                var promise = deferred.promise;
                promise = promise.then(function () {
                    return $ocLazyLoad.load('js/mainClasses.js');
                });
                angular.forEach(srcs, function (src) {
                    promise = promise.then(function () {
                        return $ocLazyLoad.load(src);
                    });
                });
                deferred.resolve();
                return promise;
            }
        };
    }
});

//# sourceMappingURL=config.js.map

"use strict";
project.controller('main', function () {
    var _this = this;
    this.showModal = function (id) {
        $(id).modal('show');
    };
    this.go = function (state) {
        angularServices.window.href = "#" + state;
    };
    this.console = function (any) {
        console.log(any);
    };
    this.functions = new Object();
    this.functions.dias = new Days();
    this.functions.formatDate12 = formatDate12;
    this.functions.formatTime12 = formatTime12;
    this.functions.clearCache = function () {
        angularServices.ss.$reset();
    };
    this.rs = angularServices.rs;
    this.init = function () {
        $('html, body').animate({
            scrollTop: 0
        }, 500);
        closeModal('#menuModal');
        $('.tooltip').remove();
        var myHash = window.location.hash.replace('#', '').split('?');
        if (myHash[0] == '/login') {
            _this.rs.showComponent = false;
        }
        else {
            _this.rs.showComponent = true;
        }
        pathData = myHash[1];
        switch (myHash[0]) {
            case '/home':
                _this.app = new IndexController(angularServices);
                break;
            case '/login':
                _this.app = new LoginController(angularServices);
                break;
            case '/test':
                break;
            default:
        }
        ;
    };
});

//# sourceMappingURL=controller.js.map

"use strict";
project.run(function ($rootScope, $sessionStorage, $http, $ocLazyLoad, $sce, $q, $location, $window, $localStorage) {
    $rootScope.showComponent = false;
    angularServices = {
        rs: $rootScope,
        ss: $sessionStorage,
        http: $http,
        lazy: $ocLazyLoad,
        sce: $sce,
        q: $q,
        location: $location,
        window: $window,
        localStorage: $localStorage,
        cookie: 0
    };
    loc = function () {
        if ($http.defaults.headers != undefined)
            $http.defaults.headers.common['W-Token'] = $sessionStorage.tk;
    };
    loc();
    load = function (src) {
        return $ocLazyLoad.load(src);
    };
    dataUrl = function (file) {
        var $d = $q.defer();
        var $p = $d.promise;
        if (file.files && file.files[0]) {
            var f = file.files[0];
            var dSize = void 0;
            if ($(file).attr('data-size')) {
                dSize = $(file).attr('data-size');
            }
            else {
                dSize = 1000;
            }
            dSize = dSize.toString();
            var size = parseInt(dSize);
            var sizeKB = size / 1000;
            if (f.size < size) {
                var reader = new FileReader();
                var targetId_1 = new String($(file).attr('data-target'));
                reader.readAsDataURL(file.files[0]);
                reader.onload = function (e) {
                    $("#" + targetId_1).css('background-image', "url(" + e.target.result + ")");
                    var myImg = {
                        b64: e.target.result,
                        name: file.files[0].name
                    };
                    $d.resolve(myImg);
                };
            }
            else {
                swAlert('Oops', "El tamano del archivo no puede ser mayor a " + sizeKB + "kb", 'error');
            }
            return $p;
        }
    };
});
var serviceRoot = '';

//# sourceMappingURL=run.js.map

//# sourceMappingURL=data:application/json;charset=utf8;base64,
